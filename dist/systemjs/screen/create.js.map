{"version":3,"sources":["../../../src/screen/create.js"],"names":[],"mappings":";MACI,OAAO,EACP,QAAQ,EACR,cAAc,EACd,aAAa,EACb,iBAAiB,EACjB,aAAa,EACb,aAAa,EACb,MAAM;;;;AARV,kBAAY,CAAC;AACT,aAAO,GAAG,OAAO,CAAC,SAAS,CAAC;AAC5B,cAAQ,GAAG,OAAO,CAAC,0BAA0B,CAAC;AAC9C,oBAAc,GAAG,OAAO,CAAC,6CAA6C,CAAC;AACvE,mBAAa,GAAG,OAAO,CAAC,iCAAiC,CAAC;AAC1D,uBAAiB,GAAG,OAAO,CAAC,oCAAoC,CAAC;AACjE,mBAAa,GAAG,OAAO,CAAC,4CAA4C,CAAC;AACrE,mBAAa,GAAG,OAAO,CAAC,4CAA4C,CAAC;AACrE,YAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;;AAE9B,YAAM,CAAC,OAAO,GAAG,SAAS,YAAY,CAAC,UAAU,EAAE;AACjD,YAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,kBAAkB,CAAC,CAAC;;AAElF,YAAI,cAAc,GAAG,wBAAU,cAAc,EAAE,gBAAgB,EAAE;AAC/D,wBAAc,CACX,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;AACtB,oBAAQ,EAAE,UAAU,CAAC,QAAQ;AAC7B,sBAAU,EAAE,UAAU;WACvB,CAAC,CAAC;;AAEL,0BAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SACtD,CAAC;;AAEF,YAAI,UAAU,GAAG,oBAAU,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AACjD,cAAI,sBAAsB,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;AAEtE,cAAI,MAAM,CAAC;AACX,cAAI,UAAU,CAAC,MAAM,EAAE;AACrB,kBAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;WACpE;;AAED,gBAAM,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY;AACjC,oBAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;WAChD,CAAC,CAAC;;AAEH,cAAI,YAAY,GAAG,MAAM,CACvB,aAAa,CAAC,MAAM,CAAC,EACrB,aAAa,CAAC,sBAAsB,EAAE,UAAU,CAAC,WAAW,CAAC,EAC7D,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAC/B,CAAC;;AAEF,oBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;SACtC,CAAC;;AAEF,kBAAU,CAAC,OAAO,GAAG,CACnB,QAAQ,EACR,iBAAiB,EAAE,CAAC,UAAU,EAC9B,aAAa,EAAE,CAAC,UAAU,CAC3B,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;;AAEjC,sBAAc,CAAC,OAAO,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;;AAEhE,eAAO,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;OACtC,CAAC","file":"src/screen/create.js","sourcesContent":["'use strict';\nvar angular = require('angular');\nvar styleRef = require('yaf/utils/refCountStyles');\nvar compositeReady = require('yaf/interfaces/common/compositeReadyContext');\nvar linkInterface = require('yaf/interfaces/behavioural/link');\nvar channelsInterface = require('yaf/interfaces/behavioural/channel');\nvar injectorReady = require('yaf/interfaces/common/injectorReadyContext');\nvar templateReady = require('yaf/interfaces/common/templateReadyContext');\nvar extend = require('extend');\n\nmodule.exports = function createScreen(definition) {\n  var module = angular.module(definition.moduleName, definition.moduleDependencies);\n\n  var registerRoutes = function ($routeProvider, channelsProvider) {\n    $routeProvider\n      .when(definition.route, {\n        template: definition.template,\n        controller: controller\n      });\n\n    channelsProvider.createChannels(definition.channels);\n  };\n\n  var controller = function ($scope, channels, link) {\n    var injectedCustomServices = Array.prototype.slice.call(arguments, 3);\n\n    var styles;\n    if (definition.styles) {\n      styles = styleRef.attachStyles(definition.name, definition.styles);\n    }\n\n    $scope.$on('$destroy', function () {\n      styleRef.detachStyles(definition.name, styles);\n    });\n\n    var readyContext = extend(\n      templateReady($scope),\n      injectorReady(injectedCustomServices, definition.injectables),\n      compositeReady(link, channels)\n    );\n\n    definition.ready.apply(readyContext);\n  };\n\n  controller.$inject = [\n    '$scope',\n    channelsInterface().entityName,\n    linkInterface().entityName\n  ].concat(definition.injectables);\n\n  registerRoutes.$inject = ['$routeProvider', 'channelsProvider'];\n\n  return module.config(registerRoutes);\n};\n"]}