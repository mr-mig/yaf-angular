{"version":3,"sources":["../../../src/element/create.js"],"names":[],"mappings":"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","file":"src/element/create.js","sourcesContent":["'use strict';\nvar conv = require('yaf').conventions;\nvar tagReady = require('yaf/interfaces/common/tagReadyContext');\nvar getOptionsValues = require('yaf/utils/getOptionsValues');\nvar attachStyles = require('yaf/utils/attachStyles');\nvar detachStyles = require('yaf/utils/detachStyles');\nvar injectorReady = require('yaf/interfaces/common/injectorReadyContext');\nvar templateReady = require('yaf/interfaces/common/templateReadyContext');\nvar extend = require('extend');\n\n// use angular directive syntax to define element\nmodule.exports = function elementDirectiveFactory(definition) {\n\n  function directiveFactory(ElementState, channels) {\n\n    // get all injected services\n    var injectedCustomServices = Array.prototype.slice.call(arguments, 2);\n\n    // todo mix options in?\n    var angularDirectiveScope = {\n      state: '=',\n      channel: '@'\n    };\n\n    return {\n      restrict: 'E',\n      template: definition.template,\n      compile: function (tEl, tAttr) {\n        if (!tAttr.state) {\n          console.log('Warning! It seems you forgot to specify state attribute for \\'' +\n            definition.name + '\\' element!');\n        }\n\n        return {\n          pre: function (scope, el, attrs) {\n            if (!scope.state) {\n              scope.state = new ElementState();\n            }\n            var styles;\n\n            if (definition.styles) {\n              styles = attachStyles(definition.styles);\n            }\n\n            if (scope.channel) {\n              var channelNames = scope.channel.split(' ');\n              channelNames.forEach(function (channel) {\n                channels.get(channel).linkWith(scope, scope.state);\n              });\n            }\n\n            if (definition.styles) {\n              scope.$on('$destroy', function () {\n                detachStyles(styles);\n              });\n            }\n\n            // collect the interpolated option values from attrs\n            var opts = getOptionsValues(attrs);\n\n\n            var readyContext = extend(\n              tagReady(el, scope.state, opts),\n              templateReady(scope),\n              injectorReady(injectedCustomServices, definition.injectables)\n            );\n            // call the ready with all tagReady and injectorReady fields\n            definition.ready.apply(readyContext);\n          },\n          post: function(){}\n        };\n      },\n      scope: angularDirectiveScope\n    };\n  }\n\n  var stateName = conv.names.state(definition.name);\n\n  directiveFactory.$inject =\n    [stateName, conv.globalNames.channels]\n      .concat(definition.injectables);\n\n  definition.component = directiveFactory;\n  return definition;\n};"]}